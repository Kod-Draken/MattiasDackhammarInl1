Här jobbar vi för VG!

1. Pull vs Push
    Pull - Dra ner filer från remote repo och merga med dina egna.
    Push - Tryck upp filer från ditt repo till remote repo.

2. Log vs Status
    Log - Visar vår commit-historik.
    Status - Visar status i vår staging area, ändringar i filer
    etc som görs redo för commit.

3. Vad är git branch
    Branches låter oss arbeta separat från Main builden, de ger oss
    möjlighet att jobba med ändringar utan att störa andras arbete,
    när vi är klara med vår ändring kan vi slå ihop vår branch med
    Main och på så sätt successivt bygga ihop kompletta program.

4. Rulla tillbaka ändringar
    Det finns flera bra sätt som har lite olika användningssyfte.
    
    Restore - I sin grund handlar restore om att återställa filer.
            Kan också flytta HEAD till en tidigare commit, och
            återställa därifrån.
            
        Exempel:
        Vi har 3 filer "A.txt, B.txt, C.txt" och modifierar
        deras innehåll, innan du commitar inser sedan att filen
        "B.txt" inte skulle ändras. Då kan vi snabbt återställa
        till HEAD med ---> git restore B.txt

        Kommandohistorik: 
        ---------------------------------
        matdac0521@Jarvis:~/undo-examples$ git commit -m "added 3 files with quotes"
        [master (root-commit) a3210c6] added 3 files with quotes
        3 files changed, 3 insertions(+)
        create mode 100644 A.txt
        create mode 100644 B.txt
        create mode 100644 C.txt
        matdac0521@Jarvis:~/undo-examples$ cat > C.txt 
        Hes not here anymore I made changes
        ^C
        matdac0521@Jarvis:~/undo-examples$ cat > B.txt // B is overwritten
        This will be removed once i restore things
        ^C
        matdac0521@Jarvis:~/undo-examples$ cat > A.txt
        Oh yeah coolaid!
        ^C
        matdac0521@Jarvis:~/undo-examples$ git restore B.txt // B is restored from prevous commit(standard)
        matdac0521@Jarvis:~/undo-examples$ cat B.txt
        Somewhere over the rainbow
        matdac0521@Jarvis:~/undo-examples$
        ---------------------------------

    Revert - Låter oss ångra en ändring genom att skapa en ny commit.
            Tillåter säkrare ändring av historiken och alla reverts
            kommer med i vår git log, eftersom de skapar en ny commit.
                
        Exempel:
        Vi skapar utöver följande 3 filer, också fil D.txt som
        commitas, och sedan fil E.txt som commitas, vi kommer på att vi
        inte ska ha fil D. ---> git revert <hash-till-comitten-med-D.txt>

        Kommandohistorik:
        ---------------------------------
        matdac0521@Jarvis:~/undo-examples$ git log
        commit 99234dd8e1a62193b6e2a58832196222a99c4e9b (HEAD -> master)
        Author: MrGazelle <m.dackhammar@gmail.com>
        Date:   Mon Oct 28 09:58:26 2024 +0100

        added E.txt

        commit ffc827d078a7e9b7d783d594c7b8e3a5816c9b2d
        Author: MrGazelle <m.dackhammar@gmail.com>
        Date:   Mon Oct 28 09:56:04 2024 +0100

        added D.txt

        commit a3210c605b4f7ec2e1f707f66dcfa3aec7ca2bf5
        Author: MrGazelle <m.dackhammar@gmail.com>
        Date:   Mon Oct 28 09:47:26 2024 +0100

        added 3 files with quotes
        matdac0521@Jarvis:~/undo-examples$ git revert ffc827d
        [master 52b1879] Revert "added D.txt"
        1 file changed, 1 deletion(-)
        delete mode 100644 D.txt
        matdac0521@Jarvis:~/undo-examples$ ls
        A.txt  B.txt  C.txt  E.txt
        matdac0521@Jarvis:~/undo-examples$ git log
        commit 52b187997858ba3a2794b6728bc98a988ab18df8 (HEAD -> master)
        Author: MrGazelle <m.dackhammar@gmail.com>
        Date:   Mon Oct 28 09:59:04 2024 +0100

                Revert "added D.txt"

                This reverts commit ffc827d078a7e9b7d783d594c7b8e3a5816c9b2d.

                We realised we didnt need D.txt but we needed E.txt
        ---------------------------------

    Reset - Reset flyttar HEAD (på alla nivåer!) och kan ändra historiken,
            beror lite på flagga, kan vara bra för att helt återställa ändringar.
            
            --soft - Bevarar staging area & working directory, om vi t.ex råkat
                    comitta för tidigt.
                        
                Exempel: Vi har av misstag commitat en java-fil med massa
                buggig kod, vi vill återkalla den men kunna smidigt ändra
                några få saker innan vi skickar iväg den igen.
                Med --soft kommer vi behålla alla ändringar i WD och SA.

                Kommandohistorik:
                ---------------------------------
                matdac0521@Jarvis:~/undo-examples$ git log
                commit 274774b28693a74f44a8aa42112aaea93ef33e91 (HEAD -> master)
                Author: MrGazelle <m.dackhammar@gmail.com>
                Date:   Mon Oct 28 10:11:27 2024 +0100

                added buggy code

                commit 52b187997858ba3a2794b6728bc98a988ab18df8
                Author: MrGazelle <m.dackhammar@gmail.com>
                Date:   Mon Oct 28 09:59:04 2024 +0100

                Revert "added D.txt"

                This reverts commit ffc827d078a7e9b7d783d594c7b8e3a5816c9b2d.

                We realised we didnt need D.txt but we needed E.txt

                commit 99234dd8e1a62193b6e2a58832196222a99c4e9b
                Author: MrGazelle <m.dackhammar@gmail.com>
                Date:   Mon Oct 28 09:58:26 2024 +0100

                added E.txt

                // more commits...
                
                matdac0521@Jarvis:~/undo-examples$ git reset --soft // here we move back 1 step in commit history, but keep changes in WD and Staging area
                matdac0521@Jarvis:~/undo-examples$ git log
                
                commit 274774b28693a74f44a8aa42112aaea93ef33e91 (HEAD -> master)
                Author: MrGazelle <m.dackhammar@gmail.com>
                Date:   Mon Oct 28 10:11:27 2024 +0100

                added buggy code

                commit 52b187997858ba3a2794b6728bc98a988ab18df8
                Author: MrGazelle <m.dackhammar@gmail.com>
                Date:   Mon Oct 28 09:59:04 2024 +0100

                Revert "added D.txt"

                This reverts commit ffc827d078a7e9b7d783d594c7b8e3a5816c9b2d.

                We realised we didnt need D.txt but we needed E.txt

                commit 99234dd8e1a62193b6e2a58832196222a99c4e9b
                Author: MrGazelle <m.dackhammar@gmail.com>
                Date:   Mon Oct 28 09:58:26 2024 +0100

                added E.txt

                // more commits...
        
                ---------------------------------

            --mixed (standard) - Återställer vår staging area men låter bli working
                    directory. Bra att ha om vi lagt till fel saker i staging area.
                        
                Exempel: Föreställ exakt samma scenario som ovan, fast istället
                för --soft så använder vi --mixed. Skillnaden syns inte direkt,
                men om vi kör git status, så ser vi att Staging Area är tom!
                Annars är det ingen skillnad.

                Kommandohistorik:
                ---------------------------------

            --hard - Blåser alla 3 träd (staging area, working directory & commit).
                    Används när man gjort helt fel och behöver återställa alla 3 träd,
                    ska användas med försiktigthet.
                        
                Exempel: Föreställ samma scenario igen, fast nu har vi stora problem
                och behöver slänga alltsammans vi gjort i java-filen och börja om.
                Vi kör ---> git reset --hard. Detta kommer precis som tidigare att flytta
                tillbaka head till tidigare commit och rensa alla ändringar i WD och SA.
                Men nu är vi fria att börja om på nytt med vår java-fil, och kan commita i 
                små steg för att slippa börja om helt.

                Kommandohistorik:
                ---------------------------------

    Rebase vs Merge
        En git rebase(ombasera) till main i github, tar en branch och dess commits och slänger ovanpå
        commithistoriken i main, den fortsätter en lång linjär sekvens av utveklingshistorik.
        Oavsett om ensförsta commit kanske är obsolet jämfört med nuvarande version i main, så lägger
        git rebase våra uppdaterijngar längst fram.
        
        Fördel rebase: Tydlig och linjär utvecklingshistorik som är mer läsbar.

        En git merge är gör istället att en ny commit skapas, man kan säga att
        det är en commit som har två föräldrar (de två brancher som mergades). Merge commiten pekar
        på sina föräldrar för att berätta om hur den blev till, istället för en linjär historik
        blir historiken förgrenad som ett stort släktträd.
        
        Fördel merge: Låter oss se hela historiken i en logisk sekvens som visar när
        funktioner implementerats och från var de kom.
        
        Uppgift:
        
        Steg 1: Skapa branch och sedan en fil i main
        ---------------------
        git init
        git switch -c dev-1
        git switch main
        cat > text.txt
            hejsan på dejsan
            vi har det bra
        ---------------------

        Steg 2: Nu har vi två brancher, vi byter tillbaka till main och gör en add & commit.
        Det gör att våra två brancher är olika, nu vill vi uppdatera "dev-1" så den matchar main.
        ---------------------
        git switch dev-1
        git merge main        
        ---------------------

        3. Detta gick ju bra, ingen konflikt! Men det ska vi åstadkomma nu. Vi skapar en till branch
        baserat på dev-1 och ser till att den är väldigt olik, sedan försöker vi merga till main
        ---------------------
        git switch dev-1
        git switch -c dev-2
        cat > text.txt
            Detta get konflikt
            Massa massa konflikt
            Banankaka!
        git switch main
        git merge dev-2

        Auto-merging text.txt
        CONFLICT (content): Merge conflict in text.txt
        Automatic merge failed; fix conflicts and then commit the result.
        ---------------------

        4. Där kom det, vi måste själva undersöka felet. det kan vi göra med
        kommandot cat, nu kommer vi se <<<, ===, >>> i texfilen. inte så fint!
        Detta är skiljemärken på var konflikten börjar och slutar, vi får själva
        hantera det. sedan kollar vi vår log, längst upp har vi en ny commit, ärvd
        från dev-2.
        ---------------------
        matdac0521@Jarvis:~/undo-examples$ git log // vi kollar log

        commit 5089614e17106da1010abe5d7b4cb313557c9e91 (HEAD -> master)
        Author: MrGazelle <m.dackhammar@gmail.com>
        Date:   Mon Oct 28 13:46:38 2024 +0100

            Added stuff to dev-3 for conflict
        ---------------------

        5. Vi tar bort våra branches och skapar en ny, i den nya branchen gör vi
        några små ändringar i textfilen & commitar ett par gånger, till slut gör
        vi rebase till main.
        ---------------------
        git branch -D dev-1
        git branch -D dev-2
        git switch -c rebase-example
        
        cat > file.txt
            hejsan
        git add .
        git commit -m "change 1"

        //vi lägger till 2 rader till, add och commit efter varje!
        //tillslut ser file.txt ut såhär:
            hejsan
            lejsan
            svenjsan

        git switch main

        git rebase rebase-example // här sker själva rebasen.
        ---------------------

        6. Nu har vi lyckats göra en rebase! vi kollar vår historik.
        Vi ser att alla 3 kommits som vi rebase-ade från vår branch lades uppepå
        historiken, istället för att skapa en enda merge commit, så ser vi nu i
        detalj vilka ändringar som gjorts i varje branch.
        ---------------------
        matdac0521@Jarvis:~/undo-examples$ git log
        
        commit 6e0ffa7aadf08e989040f63f32c446aebeb5022d (HEAD -> master, rebase-example)
        Author: MrGazelle <m.dackhammar@gmail.com>
        Date:   Mon Oct 28 14:11:46 2024 +0100

            changes 2

        commit 49cfc17ac779a70b1fc5b7a9b96de25ccd3119de
        Author: MrGazelle <m.dackhammar@gmail.com>
        Date:   Mon Oct 28 14:11:33 2024 +0100

            changes 2

        commit afa14f65cb8dd9d180b76d1514ccec10eb8ddf6d
        Author: MrGazelle <m.dackhammar@gmail.com>
        Date:   Mon Oct 28 14:11:01 2024 +0100

            changes 1

        commit 5089614e17106da1010abe5d7b4cb313557c9e91
        Author: MrGazelle <m.dackhammar@gmail.com>
        Date:   Mon Oct 28 13:46:38 2024 +0100

            Added stuff to dev-3 for conflict // titta! Här är vår gamla commit
        ---------------------
